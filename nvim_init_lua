--------------------------------------------------------------------------------
--                              init.lua
--   A single-file modern Neovim config using lazy.nvim package manager.
--   Below, you'll see replacements for older plugins and features,
--   with comments explaining how to use the new ones or noting outdated choices.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- [0] Bootstrapping lazy.nvim (modern plugin manager)
--------------------------------------------------------------------------------
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git", "clone", "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath
  })
end
vim.opt.rtp:prepend(lazypath)
-- Define a custom lualine component for Copilot status
local function copilot_status()
  -- Safely try to call the Copilot API (it’s a Vimscript function)
  local ok, status = pcall(vim.fn["copilot#Enabled"])
  if not ok then
    return ""
  end
  return status == 1 and " " or " "
end

--------------------------------------------------------------------------------
-- [1] lazy.nvim Setup: Plugin Definitions
--------------------------------------------------------------------------------
require("lazy").setup({

  ------------------------------------------------------------------------------
  -- REPLACED: w0rp/ale => Built-in LSP + Mason + Null-ls for lint/format
  -- Usage: after installing, language servers can be managed by :Mason
  --        then configured in this file's lspconfig section.
  ------------------------------------------------------------------------------
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      "williamboman/mason.nvim",
      "williamboman/mason-lspconfig.nvim",
    },
    config = function()
      require("mason").setup()
      require("mason-lspconfig").setup()

      -- Example: automatically set up any installed servers:
--      require("mason-lspconfig").setup_handlers({
--        function(server) 
--          require("lspconfig")[server].setup({})
 --       end
 --     })
    end,
  },
  {
    "nvimtools/none-ls.nvim",
    dependencies = { "nvim-lua/plenary.nvim" },
    config = function()
      local null_ls = require("null-ls")
--      null_ls.setup({
--        sources = {
--          null_ls.builtins.diagnostics.ruff,
--          null_ls.builtins.diagnostics.mypy,
--          null_ls.builtins.diagnostics.pycodestyle,
--        },
--      })
    end,
  },

  ------------------------------------------------------------------------------
  -- REPLACED: vim-airline => nvim-lualine/lualine.nvim (modern statusline)
  -- Usage: :help lualine
  ------------------------------------------------------------------------------
  {
    "nvim-lualine/lualine.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" }, -- icons
    config = function()
      require("lualine").setup({
        options = {
          theme = "tokyonight", -- matches your old preference 
          icons_enabled = true,
        },
        sections = {
            lualine_a = { "mode" },
            lualine_b = { "branch" },
            lualine_c = { "filename" },
            lualine_x = { copilot_status, "encoding", "fileformat", "filetype" },
            lualine_y = { "progress" },
            lualine_z = { "location" },
        },
      })
    end
  },

  ------------------------------------------------------------------------------
  -- REPLACED: scrooloose/nerdtree => nvim-tree.lua (modern file explorer)
  -- Usage: :NvimTreeToggle
  ------------------------------------------------------------------------------
  {
    "nvim-tree/nvim-tree.lua",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
      require("nvim-tree").setup()
    end,
  },

  ------------------------------------------------------------------------------
  -- REPLACED: majutsushi/tagbar => simrat39/symbols-outline.nvim
  ------------------------------------------------------------------------------

  -- {
  --   "preservim/tagbar",  -- The current official repo is 'preservim/tagbar'
  --   config = function()
  --      -- Optional: any specific config if needed
  --   end,
  -- },
  {
    "stevearc/aerial.nvim",
    config = function()
      -- A basic config that docks the outline on the right side,
      -- similarly to Tagbar, and uses the same <C-W>t mapping if desired.
      require("aerial").setup({
        layout = {
          -- Use "prefer_right" to open on the right side if available
          default_direction = "prefer_right",
          -- or you can explicitly force right side:
          -- max_width = { 40, 0.2 },
          -- width = nil,
          min_width = 10,
          placement = "edge", -- ensures it’s always at the far right
        },
        -- Put any other Aerial options here
        -- e.g. filter_kind = { "Class", "Function", "Method" }, etc.
      })

      -- Remap <C-W>t (your old Tagbar key) to toggle Aerial
      vim.keymap.set("n", "<C-W>t", "<cmd>AerialToggle!<CR>")
    end,
  },

  ------------------------------------------------------------------------------
  -- REPLACED: mhinz/vim-signify => lewis6991/gitsigns.nvim
  -- Usage: :help gitsigns
  ------------------------------------------------------------------------------
  {
    "lewis6991/gitsigns.nvim",
    config = function()
      require("gitsigns").setup()
    end,
  },

  ------------------------------------------------------------------------------
  -- REPLACED: mhinz/vim-startify => goolord/alpha-nvim (modern start screen)
  -- Usage: auto-shows on empty nvim or run :Alpha
  ------------------------------------------------------------------------------
  {
    "goolord/alpha-nvim",
    config = function()
      local alpha = require("alpha")
      local dashboard = require("alpha.themes.dashboard")
      dashboard.section.header.val = {
        "   Welcome to Neovim!",
        "   Remember to be awesome today :)"
      }
      alpha.setup(dashboard.config)
    end,
  },

  ------------------------------------------------------------------------------
  -- REPLACED: Yggdroot/indentLine => lukas-reineke/indent-blankline.nvim
  -- Usage: :help indent-blankline
  ------------------------------------------------------------------------------
  {
    "lukas-reineke/indent-blankline.nvim",
    -- Let Lazy know the main module is "ibl" now (Version 3)
    main = "ibl", 
    config = function()
      require("ibl").setup({
        indent = {
          char = "│",  -- same custom character
        },
        scope = {
          enabled = false, -- or true if you want outline highlighting
        },
      })
    end
  },


  ------------------------------------------------------------------------------
  -- REPLACED: tmhedberg/SimpylFold + Konfekt/FastFold => nvim-ufo 
  -- (with nvim-treesitter for better folding)
  -- Usage: :help nvim-ufo
  ------------------------------------------------------------------------------
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
      require("nvim-treesitter.configs").setup({
        highlight = { enable = true },
        indent    = { enable = true },
      })
    end,
  },
  {
    "kevinhwang91/nvim-ufo",
    dependencies = "kevinhwang91/promise-async",
    config = function()
      require("ufo").setup()
      vim.o.foldcolumn = '1'
      vim.o.foldlevel = 99
      vim.o.foldlevelstart = 99
      vim.o.foldenable = true
    end,
  },
  {
    "numToStr/Comment.nvim",
    config = function()
      require("Comment").setup()
    end,
  },
  {
    "petertriho/nvim-scrollbar",
    event = "VeryLazy",
    dependencies = {
      "lewis6991/gitsigns.nvim", -- optional: enables git signs in scrollbar
    },
    config = function()
      require("scrollbar").setup({
        show = true,
        set_highlights = true,
        handlers = {
          cursor = true,
          diagnostic = true,
          gitsigns = true,
          search = true,
        },
      })
    end,
  },
  {
    "echasnovski/mini.map",
    version = false,
    config = function()
      local map = require("mini.map")
      map.setup({
        integrations = {
          map.gen_integration.builtin_search(),
          map.gen_integration.diagnostic(),
          map.gen_integration.gitsigns(),
        },
        symbols = {
          encode = map.gen_encode_symbols.dot("4x2"),
        },
        window = {
          side = "right",
          width = 8,
          winblend = 75,
          show_integration_count = false,
        },
      })

      -- Automatically show minimap for certain filetypes
      vim.api.nvim_create_autocmd("FileType", {
        pattern = { "*" },
        callback = function()
          if vim.bo.buftype == "" and vim.fn.line("$") > 40 then
            require("mini.map").open()
          end
        end,
      })
    end,
  },

  ------------------------------------------------------------------------------
  -- Retaining some old color schemes:
  ------------------------------------------------------------------------------
  { "rakr/vim-one" },
  { "folke/tokyonight.nvim" },
  { "catppuccin/nvim", name = "catppuccin" },

  ------------------------------------------------------------------------------
  -- The rest that remain relevant:
  ------------------------------------------------------------------------------
  { "lervag/vimtex" },                 -- LaTeX
  { "dag/vim-fish" },                  -- Fish syntax
  { "elzr/vim-json" },                 -- JSON syntax
  { "nvim-telescope/telescope.nvim", dependencies = { "nvim-lua/plenary.nvim" } },
  { "epwalsh/obsidian.nvim" },         -- Obsidian plugin
  { "github/copilot.vim" },            -- GitHub Copilot
  { "lewis6991/gitsigns.nvim" }, -- optional: enables git signs in scrollbar
  { "kevinhwang91/nvim-hlslens" },
  { "tadaa/vimade",
    opts = {
      -- Recipe can be any of 'default', 'minimalist', 'duo', and 'ripple'
      -- Set animate = true to enable animations on any recipe.
      -- See the docs for other config options.
      recipe = {'duo', {animate=true}},
      fadelevel = 0.33,
--      tint = {fg={rgb={200,200,200}, intensity=1}},
    }
  },                   -- Vimade (modernized version of vimade)
})


--------------------------------------------------------------------------------
-- [2] Basic Settings (replaces old :set commands)
--------------------------------------------------------------------------------
vim.cmd [[
  " replicate your iab Ytag
  iab Ytag <C-R>=strftime("%Y-%m-%d %T by Brian McFee <brian.mcfee@nyu.edu>")<CR>
]]

local opt = vim.opt
local g   = vim.g

-- Outdated "nocompatible" is default in Neovim, no need.
-- "filetype plugin indent on" also default in Neovim.

-- True color
opt.termguicolors = true

-- Various old settings in modern style:
opt.background   = "dark"
opt.spell        = true
opt.path         = { "." }
opt.report       = 0
opt.showcmd      = true
opt.showmatch    = true
opt.showmode     = true
opt.softtabstop  = 4
opt.wrapmargin   = 1
opt.comments     = "b:#,:%,fb:-,n:>,n:)"
opt.shortmess    = "at"
opt.smartindent  = true
opt.magic        = true
opt.autowrite    = false
opt.backup       = false
opt.writebackup  = false
opt.encoding     = "utf-8"
opt.incsearch    = true
opt.autoindent   = true
opt.backspace    = { "indent", "eol", "start" }
opt.expandtab    = true
opt.helpheight   = 0
opt.hidden       = true
opt.joinspaces   = true
opt.laststatus   = 2
opt.modeline     = false
opt.number       = true
opt.errorbells   = false
opt.ignorecase   = false  -- your "noignorecase"
opt.ruler        = true
opt.shell        = "bash"
opt.shiftwidth   = 4
opt.suffixes     = { ".bak", ".swp" }
opt.tabstop      = 4
opt.title        = true
opt.visualbell   = true
opt.mouse        = "a"
opt.foldmethod   = "indent"   -- though nvim-ufo might override
g.airline_powerline_fonts = 1 -- if lualine supports powerline glyphs, we keep it
g.vimtex_compiler_progname = "nvr"
g.vimtex_quickfix_mode     = 0
g.vimtex_view_method       = "zathura"
g.tex_flavor               = "latex"

-- Copilot
g.copilot_filetypes = {
  ["*"] = true,
  python     = true,
  c          = true,
  cpp        = true,
  java       = true,
  javascript = true,
  typescript = true,
  sh         = true,
  bash       = true,
  zsh        = true,
  fish       = true,
  go         = true,
  rust       = true,
  ruby       = true,
  perl       = true,
  php        = true,
  lua        = true,
  haskell    = true,
  scala      = true,
  swift      = true,
  kotlin     = true,
  r          = true,
  julia      = true,
  racket     = true,
  clojure    = true,
  scheme     = true,
  ocaml      = true,
  fsharp     = true,
  elixir     = true,
  erlang     = true,
  rst        = true,
  tex        = false,
}

--------------------------------------------------------------------------------
-- [3] Keymaps (replacing your old `map` commands)
--------------------------------------------------------------------------------
vim.g.mapleader = ","

vim.cmd [[
" Direct translations from your old config:

nmap Q gq
vmap Q gq
map K <C-V>
noremap <C-^> <C-^>`"
map :alias map
map :which map

cnoremap <C-A> <Home>
cnoremap <C-F> <Right>
cnoremap <C-B> <Left>
cnoremap <ESC>b <S-Left>
cnoremap <ESC>f <S-Right>
cnoremap <ESC><C-H> <C-W>

" Some special key sequences
map <ESC>[19~ :split<CR>
map <ESC>[20~ :bp<CR>
map <ESC>[23~ :bn<CR>
map <ESC>[31~ :bd<CR>
map <ESC>OA <Up>
imap <ESC>OA <Up>
map <ESC>[A <Up>
imap <ESC>[A <Up>
map <ESC>OB <Down>
imap <ESC>OB <Down>
map <ESC>[B <Down>
imap <ESC>[B <Down>
map <ESC>OC <Right>
imap <ESC>OC <Right>
map <ESC>[C <Right>
imap <ESC>[C <Right>
map <ESC>OD <Left>
imap <ESC>OD <Left>
map <ESC>[D <Left>
imap <ESC>[D <Left>

" nmap <C-W>t :TagbarToggle<CR>

" Insert-changelog
map <leader>Cm <home>OCHANGED: <ESC>CYtag<ESC>,c<space>o <ESC><C-C>o<ESC>k<end>gela
map <leader>Cc <home>OCREATED: <ESC>CYtag<ESC>,c<space>o <ESC><C-C>o<ESC>k<end>gela
map <leader>Cf <home>OFIXME:   <ESC>CYtag<ESC>,c<space>o <ESC><C-C>o<ESC>k<end>gela
map <leader>Ct <home>OTODO:    <ESC>CYtag<ESC>,c<space>o <ESC><C-C>o<ESC>k<end>gela
map <leader>Cx <home>OXXX:     <ESC>CYtag<ESC>,c<space>o <ESC><C-C>o<ESC>k<end>gela

map <leader>Cs :!echo <cword> \| ispell -a <CR>
map <leader>Cd :!dict <cword> <CR>
map <leader>Cm :!man <cword> <CR>
map <leader>Cp :!pydoc <cword> <CR>

" ALE usage replaced by LSP diagnostics. If you want old keymaps:
" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)

nmap <silent> <C-k> <cmd>lua vim.diagnostic.goto_prev()<CR>
nmap <silent> <C-j> <cmd>lua vim.diagnostic.goto_next()<CR>

" NERDTree => nvim-tree
map <C-n> :NvimTreeToggle<CR>
]]


--------------------------------------------------------------------------------
-- Add GitHub Copilot status (enabled/disabled) to lualine.nvim statusline
--
-- REQUIREMENTS:
--   - You're using lualine.nvim for your statusline (already set up).
--   - You have GitHub Copilot installed via 'github/copilot.vim'.
--
-- USAGE:
--   1. Add the `copilot_status` component to your lualine config.
--   2. The function checks the copilot status per buffer using Copilot API.
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
-- [4] Autocommands (translated from your old config)
--------------------------------------------------------------------------------
local augroup = vim.api.nvim_create_augroup("UserAutoCmds", { clear = true })

-- For .tex, .txt => replicate your old settings
vim.api.nvim_create_autocmd({"BufNewFile","BufRead"}, {
  group = augroup,
  pattern = {"*.tex", "*.txt"},
  callback = function()
    vim.opt_local.linebreak = false
    vim.opt_local.wrap = true
    vim.opt_local.textwidth = 0
    vim.opt_local.wrapmargin = 0
    vim.opt_local.conceallevel = 0
  end,
})

-- For .jams => set syntax=json
vim.api.nvim_create_autocmd({"BufNewFile","BufRead"}, {
  group = augroup,
  pattern = "*.jams",
  command = "set syntax=json",
})

-- For .json => conceallevel=0
vim.api.nvim_create_autocmd({"BufNewFile","BufRead"}, {
  group = augroup,
  pattern = "*.json",
  callback = function()
    vim.opt_local.conceallevel = 0
  end,
})


-- If you had custom highlight for IndentGuidesEven:
vim.api.nvim_set_hl(0, "IndentBlanklineChar", { fg = "#4a4a4a" })


--------------------------------------------------------------------------------
-- [5] Set the colorscheme after plugins have loaded
--------------------------------------------------------------------------------
local ok, _ = pcall(vim.cmd, "colorscheme tokyonight")
if not ok then
  vim.cmd("colorscheme default")
end

--------------------------------------------------------------------------------
-- [6] Force conceallevel=0 globally (like your old "set conceallevel=0")
--------------------------------------------------------------------------------
vim.opt.conceallevel = 0
